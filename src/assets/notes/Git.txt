Installation:
	Download the latest tarball from the Git website
		tar -xjf git-YOUR-VERSION.tar.bz2
		cd git-YOUR-VERSION
		make
		make install

	You can compile the documentation from source as well. Replace the last two lines in the previous steps with this:
		make all doc
		make install install-doc

	Git on Ubuntu.
		sudo apt-get install git-core

		To install the user manual, do this:
			sudo apt-get install git-doc


Configuration:
	~/.gitconfig
	
	Global:
		git config --global user.name "Your Name"
		git config --global user.email "user@domain.com"

	Set the Git user for a specific repository.
		cd /path/to/repository
		git config user.name "Your Name"
		git config user.email "user@domain.com"
	
	Turn colors on wherever possible in the Git UI.
		git config --global color.ui auto
		
	Configure Git’s editor.
		git config --global core.editor /path/to/editor

		
New Repository:
	git init

	Create a repository in an existing directory, and add all files from that directory:
		cd /path/to/some/directory
		git init
		git add .
		git commit -m "some commit message"

	
Add:
	git add <file>
	git add path/<file>
	git add path/
	git add .	
	git add *.*
	git add something.*
	git add some-path/*.*
	git add -A|--all	
	
	Update tracked files:
		git add -u|--update
	
	Partially:
		git add -p|--patch
		git add -p <file>
		git add -p path/<file>
		
	Editing:
		git add -e
		git add -e <file>
		git add -e path/<file>


Ammend:
	git --amend


Branch:
	Create a new branch from current place in the repository:
		git branch <new-branch-name>

	Create a new branch from another branch, tag, or commit:
		git branch <new-branch-name> <starting-point>
		
		Example:
			git branch newer 99a0de8

	Check out a different branch, tag, and so on:
		git checkout <branch>
		
		Example:
			git checkout newer

	Create a branch and check it out at the same time:
		git checkout -b <new-branch-name> [<starting-point>]

		Example:
			git checkout -b newest 64648c9

	Create a branch with or without tracking:
		Using a remote branch as your <starting point implies that --track is on:
			git branch --track <new-branch-name> [<starting-point>]

		Use --no-track to turn it off:
			git branch --no-track <new-branch-name> [<starting-point>]
			
	Delete a branch that has been merged into the current branch:
		git branch -d <branch-name>

	Delete a branch that hasn’t been merged into the current branch:
		git branch -D experiment
			
	View all local branches:
		git branch

	View all remote branches:
		git branch -r

	View all branches.
		git branch -a

	View all that are or are not merged into the current branch:
		git branch --merged
		git branch --no-merged

	View all branches that contain a particular commit.
		git branch --contains <commit-id>


Clone a repository:
	git clone some-repository
	
	Create a shallow clone with the last fifty commits:
		git clone --depth 50 some-repository
		git clone some-repository some-path
		

Commit:
	git commit -m "some message"
	git commit -m "message 01" -m "message 02" -m "etc"
	git commit -m "some message" -a	
	git commit -a -C HEAD

	Commit and launch editor for commit message:
		git commit
		

Delete:
	Delete a file:
		git rm -- <file>
		git commit -m "remove <file>"

	Delete a directory:
		git rm -r -- <dir>/
		git commit -m "remove the <dir> directory"

	Get a directory back after deleting it but before committing it:
		1.- Reset
			git reset HEAD -- <dir>/

		2.- Check out the files from the repository:
			git checkout -- <dir>/

	Force a file to be removed:
		git rm -f -- <file>


Discard changes:
	git checkout -- <file>
	
	
Ignore:
	Ignore a specific file and/or path called cache:
		Add the following to .gitignore:
			cache

	Ignore all .swp files:
		Add the following to .gitignore:
			*.swp
			
	Set up a global excludes file:
		Your excludesfile can exist anywhere you want on your computer. The
		following example puts it in your home directory in the .gitignore file:
			git config --global core.excludesfile \
			~/.gitignore


Merge:
	Merge changes from development to the master branch:
		git checkout master
		git merge development
		
	Merge changes, but don’t commit:
		git merge --no-commit development

	Force the creation of a merge commit:
		git merge --no-ff development

	Add a one-line log message from each merged commit to the merge message:
		git merge --log development

	Specify a custom log message for a merge commit, if created:
		git merge -m "some message" development
		
	You can use git commit --amend to modify the commit message after the fact too:
		git merge --log --no-ff development
		git commit --amend -c HEAD


Move a file or directory:
	Move README.md to README.rst, use this:
		git mv README.md README.rst
		git commit -m "Changed README from Markdown to ReSTructured text"
		
	Move a file or directory into another directory:
		git mv README.rst docs/
		git commit -m "Moved README into docs/ directory"


Rebase:
	Rebase your current branch against another:
		Rebase your current branch against master:
			git rebase master

	Rebase against a tag or commit ID:
		git rebase af0fe21

	Undo a rebase after it completes:
		git reset --hard ORIG_HEAD
		HEAD is now at e9f9fdc update the README

		--hard can be dangerous.
		

Remotes repositories:
	Add a new remote repository:
		git remote add <name> <repository-url>

		Example:
			git remote add tswicegood\ git://github.com/tswicegood/bobby-tables.git

	Fetch changes from remote repository:
		git fetch <remote-repository-name>
	
		Example:
			git fetch tswicegood

	Fetch a specific branch:
		git fetch remote \
			<local-branch-name>:remotes/remote/<remote-branch-name>
			
		Example:
			git fetch origin master:remotes/origin/master
			
	Fetch changes from multiple remote repositories:
		git fetch --multiple remote1 remote2 ...

	Fetch changes from all remote repositories:
		git fetch --all

	Remove a remote repository:
		git remote rm <name>

		Example:
			git remote rm tswicegood
			
	Make the master branch a tracking branch:
		git checkout origin/master

	You are in 'detached HEAD' state:
		git checkout -b <new-branch-name>
		git branch -d master
		git checkout -b master

	Pull changes from a remote repository:
		git pull [<remote-repository-name> [<remote-branch-name>]]
		
		Example:
			git pull tswicegood master

	Pull changes from a different branch into your local branch:
		git pull origin <remote-branch-name>:<local-branch-name>

		Example:
			git pull origin development:team-dev

	Pull changes and rebase instead of merge:
		To fetch from origin and rebase against its main branch, use this:
			git pull --rebase origin master


Sharing changes:
	1a.- Fetch changes from a remote repository:
		git fetch <remote-repository-name>

	1b.- Pull changes from a remote repository:
		git pull <remote-repository-name>

		Pull from a repository you cloned:
			git pull origin
			
		Pull, but rebase your local changes on top of the remote change instead of merging them:
			git pull --rebase origin <remote-branch-name>

	2.- Push changes to a remote repository:
		git push <remote-repository-name> <branch-name>


Status:
	git status
	
Tags:
	List all tags:
		git tag

	Tag the latest commit as version 1.0 in the current branch:
		git tag v1.0

	Create a tag called beta1 from the next to last commit:
		git tag beta1 HEAD^


Undoing Uncommitted Changes (unstaged):
	A modified file that’s been staged:
		git reset HEAD -- <file>

	All uncommitted changes to a file:
		Warning: Doing this deletes files and cannot be undone.
		git checkout -- <file>

	New files:
		git rm --cached
		
		
https://github.com/dhlmx/angular-utilities.git
