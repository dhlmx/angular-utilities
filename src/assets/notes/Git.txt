Installation:
	Download the latest tarball from the Git website
		tar -xjf git-YOUR-VERSION.tar.bz2
		cd git-YOUR-VERSION
		make
		make install

	You can compile the documentation from source as well. Replace the last two lines in the previous steps with this:
		make all doc
		make install install-doc

	Git on Ubuntu.
		sudo apt-get install git-core

		To install the user manual, do this:
			sudo apt-get install git-doc

Configuration:
	~/.gitconfig
	
	Global:
		git config --global user.name "Your Name"
		git config --global user.email "user@domain.com"

	Set the Git user for a specific repository.
		cd /path/to/repository
		git config user.name "Your Name"
		git config user.email "user@domain.com"
	
	Turn colors on wherever possible in the Git UI.
		git config --global color.ui auto
		
	Configure Git’s editor.
		git config --global core.editor /path/to/editor
		
New Repository:
	git init

	Create a repository in an existing directory, and add all files from that directory:
		cd /path/to/some/directory
		git init
		git add .
		git commit -m "some commit message"
	
Add:
	git add <file>
	git add path/<file>
	git add path/
	git add .	
	git add *.*
	git add something.*
	git add some-path/*.*
	git add -A|--all	
	
	Update tracked files:
		git add -u|--update
	
	Partially:
		git add -p|--patch
		git add -p <file>
		git add -p path/<file>
		
	Editing:
		git add -e
		git add -e <file>
		git add -e path/<file>

Ammend:
	git --amend		

	
Clone a repository:
	git clone some-repository
	
	Create a shallow clone with the last fifty commits:
		git clone --depth 50 some-repository
		git clone some-repository some-path
		
Commit:
	git commit -m "some message"
	git commit -m "message 01" -m "message 02" -m "etc"
	git commit -m "some message" -a	
	git commit -a -C HEAD

	Commit and launch editor for commit message:
		git commit
		
Delete:
	Delete a file:
		git rm -- <file>
		git commit -m "remove <file>"

	Delete a directory:
		git rm -r -- <dir>/
		git commit -m "remove the <dir> directory"

	Get a directory back after deleting it but before committing it:
		1.- Reset
			git reset HEAD -- <dir>/

		2.- Check out the files from the repository:
			git checkout -- <dir>/

	Force a file to be removed:
		git rm -f -- <file>

Discard changes:
	git checkout -- <file>
	
	
Ignore
	Ignore a specific file and/or path called cache:
		Add the following to .gitignore:
			cache

	Ignore all .swp files:
		Add the following to .gitignore:
			*.swp
			
	Set up a global excludes file:
		Your excludesfile can exist anywhere you want on your computer. The
		following example puts it in your home directory in the .gitignore file:
			git config --global core.excludesfile \
			~/.gitignore

Move a file or directory:
	Move README.md to README.rst, use this:
		git mv README.md README.rst
		git commit -m "Changed README from Markdown to ReSTructured text"
		
	Move a file or directory into another directory:
		git mv README.rst docs/
		git commit -m "Moved README into docs/ directory"

Sharing changes:
	1a.- Fetch changes from a remote repository:
		git fetch <remote name>

	1b.- Pull changes from a remote repository:
		git pull <remote name>

		Pull from a repository you cloned:
			git pull origin
			
		Pull, but rebase your local changes on top of the remote change instead of merging them:
			git pull --rebase origin <remote-branch-name>

	2.- Push changes to a remote repository:
		git push <remote name> <branch name>



Status:
	git status
	
Undoing Uncommitted Changes (unstaged):
	A modified file that’s been staged:
		git reset HEAD -- <file>

	All uncommitted changes to a file:
		Warning: Doing this deletes files and cannot be undone.
		git checkout -- <file>

	New files:
		git rm --cached
		
		

https://github.com/dhlmx/angular-utilities.git




 
